"""
Contains composition of code for
    producer paradigm
        - generates the tf data Datasets

    provider paradigm
        - consumes the data generated by the datasets
        -

    Only use this class to interact with _Producer and _Provider

Author: Ian Q.

Notes:

"""

import tensorflow as tf
from Sequences.translation.Pipeline.producer import _Producer
from Sequences.translation.Pipeline.provider import _Provider
import pprint
import logging

class Dataset(object):
    def __init__(self, sess, producer_config:dict, provider_config:dict):
        self.logger = logging.getLogger(__name__)
        self.logger.info('Producer: {}'.format(producer_config))
        self.logger.info('Provider: {}'.format(provider_config))

        self.glob_pattern = producer_config.pop('glob_pattern')

        self.sess = sess

        self.producer =  _Producer(**producer_config)
        self.provider = _Provider(**provider_config)

    #############################################
    # Producer
    #   - generates the datasets
    #############################################

    def generate_records(self, raw_data_location, glob_pattern=None, overwrite=False):
        glob_pattern = glob_pattern if glob_pattern is not None else self.glob_pattern
        self.producer.generate_records(raw_data_location, pattern=glob_pattern, overwrite=overwrite)

    #############################################
    # Provider
    #   - loads in the data and feeds it
    #############################################

    def generate_specs(self, hparams):
        return self.provider.generate_specs(hparams)